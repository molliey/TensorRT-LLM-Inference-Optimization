version: '3.8'

services:
  tensorrt-llm-server:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: tensorrt-llm-inference
    ports:
      - "8000:8000"
    volumes:
      - ../models:/app/models
      - ../engines:/app/engines
      - ../logs:/app/logs
      - ../config:/app/config
      - ../benchmark/results:/app/benchmark/results
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - ENGINE_PATH=/app/engines/gpt2_optimized.engine
      - MODEL_NAME=gpt2
      - MAX_BATCH_SIZE=8
      - MAX_SEQUENCE_LENGTH=1024
      - LOG_LEVEL=INFO
      - WORKERS=1
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - tensorrt-network

  # Optional: Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: tensorrt-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - tensorrt-network

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: tensorrt-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - tensorrt-network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: tensorrt-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - tensorrt-network

  # Optional: Load balancer with Nginx
  nginx:
    image: nginx:alpine
    container_name: tensorrt-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - tensorrt-llm-server
    restart: unless-stopped
    networks:
      - tensorrt-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  tensorrt-network:
    driver: bridge