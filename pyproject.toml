[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tensorrt-llm-inference-optimization"
version = "1.0.0"
description = "High-performance GPT2 inference using TensorRT-LLM with KV Cache and FlashAttention optimizations"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "TensorRT-LLM Team", email = "tensorrt-llm@example.com"}
]
maintainers = [
    {name = "TensorRT-LLM Team", email = "tensorrt-llm@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Hardware :: Hardware Drivers",
]
keywords = [
    "tensorrt",
    "llm", 
    "inference",
    "optimization",
    "gpt2",
    "transformer",
    "nvidia",
    "cuda",
    "kv-cache",
    "flash-attention",
    "fastapi",
    "onnx",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=2.0.0",
    "transformers>=4.30.0", 
    "numpy>=1.21.0",
    "onnx>=1.14.0",
    "onnxruntime-gpu>=1.15.0",
    "nvidia-tensorrt>=8.6.0",
    "pycuda>=2022.1",
    "nvidia-ml-py3>=11.495.46",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.22.0",
    "pydantic>=2.0.0",
    "psutil>=5.9.0",
    "GPUtil>=1.4.0", 
    "requests>=2.31.0",
    "aiofiles>=23.0.0",
    "python-multipart>=0.0.6",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "prometheus-client>=0.17.0",
    "structlog>=23.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "pandas>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0", 
    "mypy>=1.4.0",
    "pre-commit>=3.3.0",
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
]
optimization = [
    "onnxoptimizer>=0.3.0",
    "accelerate>=0.20.0",
    "optimum>=1.9.0",
]
monitoring = [
    "prometheus-client>=0.17.0",
    "grafana-api>=1.0.3",
]
profiling = [
    "py-spy>=0.3.14", 
    "memory-profiler>=0.61.0",
    "nvidia-ml-py>=11.495.46",
]
database = [
    "redis>=4.6.0",
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
]
visualization = [
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0", 
    "plotly>=5.15.0",
    "dash>=2.11.0",
]

[project.urls]
Homepage = "https://github.com/tensorrt-llm/inference-optimization"
Repository = "https://github.com/tensorrt-llm/inference-optimization.git"
Documentation = "https://tensorrt-llm-inference-optimization.readthedocs.io/"
"Bug Reports" = "https://github.com/tensorrt-llm/inference-optimization/issues"
Changelog = "https://github.com/tensorrt-llm/inference-optimization/blob/main/CHANGELOG.md"

[project.scripts]
tensorrt-llm-server = "server.api:main"
tensorrt-llm-build = "scripts.build_engine:main"
tensorrt-llm-benchmark = "scripts.benchmark:main"

[tool.setuptools]
package-dir = {"" = "."}
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["models*", "engine*", "server*", "benchmark*"]
exclude = ["tests*", "logs*", "*.results*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.toml", "*.cfg", "*.ini"]
"docker" = ["*"]
"deploy" = ["*.yaml", "*.yml"]
"scripts" = ["*.sh"]
"config" = ["*.yaml", "*.yml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | logs
)/
'''

# isort configuration  
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["models", "engine", "server", "benchmark"]
known_third_party = ["torch", "transformers", "tensorrt", "fastapi", "onnx", "numpy", "pytest"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "tensorrt.*",
    "pycuda.*", 
    "onnxruntime.*",
    "GPUtil.*",
    "psutil.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q", 
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests",
    "gpu: marks tests as requiring GPU",
    "slow: marks tests as slow running",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
asyncio_mode = "auto"

# Coverage configuration  
[tool.coverage.run]
source = ["models", "engine", "server", "benchmark"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml)
# See setup.cfg for flake8 config

# Bandit configuration for security linting
[tool.bandit]
exclude_dirs = ["tests", "build", "dist", ".venv", "venv"]
skips = ["B101", "B601"]  # Skip assert statements and shell=True

# Pylint configuration
[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring  
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0613",  # Unused argument
]

[tool.pylint.format]
max-line-length = 88

# Ruff configuration (modern Python linter)
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]